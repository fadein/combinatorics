* TODO Add tests.
* TODO ={for-each,map,reduce}-{un}ordered-subsets= with optional =k=
  These should cover all cases, right?
  See [[http://stackoverflow.com/questions/2710713/algorithm-to-generate-all-possible-permutations-of-a-list][here]] for permutations; [[http://stackoverflow.com/questions/127704/algorithm-to-return-all-combinations-of-k-elements-from-n][here]] for combinations. Permutations (e.g.
  ordered subsets) look simpler.

  #+BEGIN_SRC scheme
    (use debug
         define-record-and-printer
         srfi-1)
    
    (define ordered-subset-for-each
      (case-lambda
       ((f list)
        (for-each-ordered-subset list (length list)))
       ((f list k)
        (let iter ((list list)
                   (k k) 
                   (subset '()))
          (if (zero? k)
              (f subset)
              (for-each
                  (lambda (element)
                    (iter (delete element list)
                          (sub1 k)
                          (cons element subset)))
                list))))))
    
    (define ordered-subset-fold
      (case-lambda
       ((cons nil list)
        (ordered-subset-fold cons nil list (length list)))
       ((cons nil list k)
        (let ((nil (make-parameter nil)))
          (ordered-subset-for-each
           (lambda (subset)
             (nil (cons subset (nil))))
           list k)
          (nil)))))
    
    (define ordered-subset-map
      (case-lambda
       ((f list) (ordered-subset-map f list (length list)))
       ((f list k)
        (ordered-subset-fold cons '() list k))))
  #+END_SRC

  Is =reduce= or =fold= sufficient to implement =for-each= and =map=?

  Let’s make this bitch circular; pop a sentinel on there; and
  recurse.

  Hmm: we either have to copy the list or destroy it to [[http://stackoverflow.com/questions/14678943/scheme-streams-and-circular-lists][make it
  circular]]:

  #+BEGIN_SRC scheme
    (define (circular-list val1 . vals)
      (let ((ans (cons val1 vals)))
        (set-cdr! (last-pair ans) ans)
            ans))
  #+END_SRC

  We can =apply= the list to =circular-list=, but we run up against
  the =apply= ceiling; fuck it, let’s run up against it for now.

  See [[http://www.cs.colostate.edu/~anderson/cs161/wiki/doku.php?do%3Dexport_s5&id%3Dslides:week8#slide14][this talk]]; uses the multiple index trick. There are [[http://www.cs.utexas.edu/users/djimenez/utsa/cs3343/lecture25.html][some more
  notes]].
  
  [[http://wwwx.cs.unc.edu/~snape/publications/msc/thesis.pdf][This guy]] did it functionally.

  See: Ehrlich, G. (1973b). Loopless algorithms for generating
  permutations, combinations, and other combinatorial configurations.
  Journal of the ACM 20 (3) 500–513.

  #+BEGIN_SRC scheme
    (use debug
         vector-lib)
    
    (define (project subset list)
      (vector-fold (lambda (i projection j)
                     (cons (list-ref list j) projection))
                   '()
                   subset))
    
    ;;; Thanks, Daniel Ángel Jiménez:
    ;;; <http://www.cs.utexas.edu/users/djimenez/utsa/cs3343/lecture25.html>.
    (define unordered-subset-for-each
      (case-lambda
       ((f list)
        (unordered-subset-for-each f list (length list)))
       ((f list k)
        (let ((subset (make-vector k))
              (n (length list)))
          (let iter ((start 0)
                     (p 0))
            (if (= p k)
                (f (project subset list))
                (do ((i start (+ i 1)))
                    ((= i n))
                  (vector-set! subset p i)
                  (iter (add1 i) (add1 p)))))))))
    
    (define unordered-subset-fold
      (case-lambda
       ((cons nil list)
        (unordered-subset-fold cons nil list (length list)))
       ((cons nil list k)
        (let ((nil (make-parameter nil)))
          (unordered-subset-for-each
           (lambda (subset)
             (nil (cons subset (nil))))
           list
           k)
          (nil)))))
    
    (define unordered-subset-map
      (case-lambda
       ((f list) (unordered-subset-map f list (length list)))
       ((f list k)
        (unordered-subset-fold cons '() list k))))
    
    (unordered-subset-for-each display '(1 2 3 4) 3)
    (debug (unordered-subset-fold cons '() '(1 2 3 4) 3)
           (unordered-subset-map values '(1 2 3 4) 3))
  #+END_SRC
* TODO Replacement
  [[http://rosettacode.org/wiki/Combinations][Replacement]] is another dimension, too. Damn. Provide replacement as
  a flag, or use another procedure?

  This merely affects (at least in the case of permutations), the
  delete operations.
* TODO Multi-sets
  We need an e.g. =delete-first= for [[http://compprog.wordpress.com/2007/10/17/generating-combinations-1/][multi-sets]].
